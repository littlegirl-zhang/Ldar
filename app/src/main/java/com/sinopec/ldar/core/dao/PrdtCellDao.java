package com.sinopec.ldar.core.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sinopec.ldar.core.entity.PrdtCell;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRDT_CELL".
*/
public class PrdtCellDao extends AbstractDao<PrdtCell, Void> {

    public static final String TABLENAME = "PRDT_CELL";

    /**
     * Properties of entity PrdtCell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OUId = new Property(0, double.class, "OUId", false, "OUID");
        public final static Property OrgId = new Property(1, double.class, "OrgId", false, "ORG_ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Sname = new Property(3, String.class, "Sname", false, "SNAME");
        public final static Property ParentId = new Property(4, double.class, "ParentId", false, "PARENT_ID");
    }


    public PrdtCellDao(DaoConfig config) {
        super(config);
    }
    
    public PrdtCellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRDT_CELL\" (" + //
                "\"OUID\" REAL NOT NULL ," + // 0: OUId
                "\"ORG_ID\" REAL NOT NULL ," + // 1: OrgId
                "\"NAME\" TEXT," + // 2: Name
                "\"SNAME\" TEXT," + // 3: Sname
                "\"PARENT_ID\" REAL NOT NULL );"); // 4: ParentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRDT_CELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrdtCell entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getOUId());
        stmt.bindDouble(2, entity.getOrgId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Sname = entity.getSname();
        if (Sname != null) {
            stmt.bindString(4, Sname);
        }
        stmt.bindDouble(5, entity.getParentId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrdtCell entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getOUId());
        stmt.bindDouble(2, entity.getOrgId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Sname = entity.getSname();
        if (Sname != null) {
            stmt.bindString(4, Sname);
        }
        stmt.bindDouble(5, entity.getParentId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PrdtCell readEntity(Cursor cursor, int offset) {
        PrdtCell entity = new PrdtCell( //
            cursor.getDouble(offset + 0), // OUId
            cursor.getDouble(offset + 1), // OrgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Sname
            cursor.getDouble(offset + 4) // ParentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrdtCell entity, int offset) {
        entity.setOUId(cursor.getDouble(offset + 0));
        entity.setOrgId(cursor.getDouble(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentId(cursor.getDouble(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PrdtCell entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PrdtCell entity) {
        return null;
    }

    @Override
    public boolean hasKey(PrdtCell entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
