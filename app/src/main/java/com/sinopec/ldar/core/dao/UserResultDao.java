package com.sinopec.ldar.core.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sinopec.ldar.core.entity.UserResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_RESULT".
*/
public class UserResultDao extends AbstractDao<UserResult, Void> {

    public static final String TABLENAME = "USER_RESULT";

    /**
     * Properties of entity UserResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, double.class, "UserId", false, "USER_ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Password = new Property(2, String.class, "Password", false, "PASSWORD");
        public final static Property PrdtCellId = new Property(3, double.class, "PrdtCellId", false, "PRDT_CELL_ID");
        public final static Property PrdtCellSname = new Property(4, String.class, "PrdtCellSname", false, "PRDT_CELL_SNAME");
    }


    public UserResultDao(DaoConfig config) {
        super(config);
    }
    
    public UserResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_RESULT\" (" + //
                "\"USER_ID\" REAL NOT NULL ," + // 0: UserId
                "\"NAME\" TEXT," + // 1: Name
                "\"PASSWORD\" TEXT," + // 2: Password
                "\"PRDT_CELL_ID\" REAL NOT NULL ," + // 3: PrdtCellId
                "\"PRDT_CELL_SNAME\" TEXT);"); // 4: PrdtCellSname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserResult entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getUserId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(3, Password);
        }
        stmt.bindDouble(4, entity.getPrdtCellId());
 
        String PrdtCellSname = entity.getPrdtCellSname();
        if (PrdtCellSname != null) {
            stmt.bindString(5, PrdtCellSname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserResult entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getUserId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(3, Password);
        }
        stmt.bindDouble(4, entity.getPrdtCellId());
 
        String PrdtCellSname = entity.getPrdtCellSname();
        if (PrdtCellSname != null) {
            stmt.bindString(5, PrdtCellSname);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserResult readEntity(Cursor cursor, int offset) {
        UserResult entity = new UserResult( //
            cursor.getDouble(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Password
            cursor.getDouble(offset + 3), // PrdtCellId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // PrdtCellSname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserResult entity, int offset) {
        entity.setUserId(cursor.getDouble(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrdtCellId(cursor.getDouble(offset + 3));
        entity.setPrdtCellSname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserResult entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserResult entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserResult entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
